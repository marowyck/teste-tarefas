"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/to-dos/page",{

/***/ "(app-pages-browser)/./app/stores/useTasksStore.ts":
/*!*************************************!*\
  !*** ./app/stores/useTasksStore.ts ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useTasksStore: function() { return /* binding */ useTasksStore; }\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/react.mjs\");\n\nconst useTasksStore = (0,zustand__WEBPACK_IMPORTED_MODULE_0__.create)((set, get)=>{\n    return {\n        isTaskDialogOpened: false,\n        setIsTaskDialogOpened: (isDialogOpened)=>{\n            set({\n                isTaskDialogOpened: isDialogOpened\n            });\n        },\n        tasks: [],\n        isLoading: false,\n        setIsLoading: (isLoading)=>{\n            set({\n                isLoading\n            });\n        },\n        openDeleteDialog: false,\n        setOpenDeleteDialog: (openDeleteDialog)=>{\n            set({\n                openDeleteDialog: openDeleteDialog\n            });\n        },\n        taskSelected: null,\n        setTaskSelected: (task)=>{\n            set({\n                taskSelected: task\n            });\n        },\n        setTasks: (tasks)=>{\n            set({\n                tasks\n            });\n        },\n        addNewTask: async (task)=>{\n            try {\n                set({\n                    isLoading: true\n                });\n                const currentTasks = get().tasks;\n                const response = await fetch(\"/api/tasks\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(task)\n                });\n                const results = await response.json();\n                if (!results.success) {\n                    throw new Error(results.message);\n                }\n                const updatedTasks = [\n                    ...currentTasks,\n                    task\n                ];\n                set({\n                    tasks: sortTasksByCompleted(updatedTasks)\n                });\n                return {\n                    success: true,\n                    message: \"Tarefa adicionada com sucesso\",\n                    task\n                };\n            } catch (error) {\n                console.log(error);\n                return {\n                    success: false,\n                    message: \"Erro ao adicionar tarefa\",\n                    task\n                };\n            } finally{\n                set({\n                    isLoading: false\n                });\n            }\n        },\n        fetchTasks: async (user)=>{\n            try {\n                set({\n                    isLoading: true\n                });\n                if (!user) {\n                    return {\n                        success: false,\n                        message: \"ID do usu\\xe1rio definido\"\n                    };\n                }\n                console.log(user);\n                const response = await fetch(\"/api/tasks?userId=\".concat(user.id), {\n                    method: \"GET\"\n                });\n                const results = await response.json();\n                if (!results.success || !results.tasks) {\n                    return {\n                        success: false,\n                        message: \"Erro ao obter tarefa\"\n                    };\n                }\n                set({\n                    tasks: sortTasksByCompleted(results.tasks)\n                });\n                return {\n                    success: true,\n                    message: \"Tarefa obtida com sucesso\"\n                };\n            } catch (error) {\n                console.error(\"Erro ao obter tarefas:\", error);\n                return {\n                    success: false,\n                    message: \"Erro ao obter tarefa\"\n                };\n            } finally{\n                set({\n                    isLoading: false\n                });\n            }\n        },\n        deleteTaskFunction: async (option, user, task)=>{\n            try {\n                set({\n                    isLoading: true\n                });\n                if (!user) {\n                    return {\n                        success: false,\n                        message: \"Usu\\xe1rio n\\xe3o definido\"\n                    };\n                }\n                const response = await fetch(\"/api/tasks?userId=\".concat(user.id), {\n                    method: \"DELETE\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        option: option,\n                        task: task\n                    })\n                });\n                const results = await response.json();\n                if (!results.success) {\n                    return {\n                        success: false,\n                        message: results.message\n                    };\n                }\n                const currentTasks = get().tasks;\n                if (option === \"delete\" && task) {\n                    const updatedTasks = currentTasks.filter((t)=>t.id !== task.id);\n                    set({\n                        tasks: sortTasksByCompleted(updatedTasks)\n                    });\n                }\n                if (option === \"deleteAll\") {\n                    set({\n                        tasks: []\n                    });\n                }\n                return {\n                    success: true,\n                    message: results.message\n                };\n            } catch (error) {\n                return {\n                    success: false,\n                    message: \"Erro ao deletar: \".concat(error)\n                };\n            } finally{\n                set({\n                    isLoading: false\n                });\n            }\n        },\n        updateTaskFunction: async (task)=>{\n            try {\n                set({\n                    isLoading: true\n                });\n                const response = await fetch(\"/api/tasks\", {\n                    method: \"PUT\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(task)\n                });\n                const results = await response.json();\n                if (!results.success) {\n                    return {\n                        success: false,\n                        message: \"Erro ao atualizar\"\n                    };\n                }\n                const currentTasks = get().tasks;\n                const updatedTasks = currentTasks.map((t)=>t.id === task.id ? {\n                        ...t,\n                        ...task\n                    } : t);\n                set({\n                    tasks: sortTasksByCompleted(updatedTasks)\n                });\n                return {\n                    success: true,\n                    message: \"Tarefa atualizada com sucesso\"\n                };\n            } catch (error) {\n                return {\n                    success: false,\n                    message: \"Erro ao atualizar, \".concat(error)\n                };\n            } finally{\n                set({\n                    isLoading: false\n                });\n            }\n        }\n    };\n});\nfunction sortTasksByCompleted(tasks) {\n    const sortedTasks = tasks.sort((a, b)=>{\n        if (a.status === \"in progress\" && b.status !== \"in progress\") {\n            return -1;\n        }\n        if (a.status !== \"in progress\" && b.status === \"in progress\") {\n            return 1;\n        }\n        return 0;\n    });\n    return sortedTasks;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/stores/useTasksStore.ts\n"));

/***/ })

});